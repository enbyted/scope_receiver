#include "mat_writer.h"

namespace mat
{
    std::ostream& operator<<(std::ostream& str, const header&)
    {
        std::string text = "MATLAB 5.0 MAT-file. Generated by scope_receiver";
        text.resize(116);

        str.write(&*text.cbegin(), text.size());
        const char zeros[8] = {'\0'};
        uint16_t version = 0x0100;
        uint16_t BOM_mark = ('M' << 8) | 'I';

        str.write(zeros, 8);
        str.write((char*)&version, 2);
        str.write((char*)&BOM_mark, 2);
        return str;
    }

    std::ostream& operator<<(std::ostream& str, const matrix& matrix)
    {
        uint32_t type = 0x0e; // matrix
        uint32_t size = 24 /* header size */ + 8 /* dimensions size */ + 8 /* name dimensions size */;
        size += matrix.name.size();
        size += (8 - matrix.name.size()) % 8;
        size += 8 /* data type and something? */;
        size += 16 * matrix.data.size();

        str.write((char*)&type, 4);
        str.write((char*)&size, 4);

        char some_headers[24] = { 6,0,0,0, 8,0,0,0, 6,0,0,0, 0,0,0,0, 5,0,0,0,8,0,0,0 };
        str.write(some_headers, 24);

        uint32_t rows = 2;
        uint32_t cols = matrix.data.size();
        str.write((char*)&rows, 4);
        str.write((char*)&cols, 4);

        rows = 1;
        cols = matrix.name.size();
        str.write((char*)&rows, 4);
        str.write((char*)&cols, 4);

        str << matrix.name;
        char zeros[8] = {0};
        str.write(zeros, (8 - matrix.name.size()) % 8);

        char more_headers[4] = { 9,0,0,0 };
        str.write(more_headers, 4);
        uint32_t data_byte_count = matrix.data.size() * 2 * 8;
        str.write((char*)&data_byte_count, 4);

        for (const auto& val : matrix.data)
        {
            str.write((char*)&val.first, 8);
            str.write((char*)&val.second, 8);
        }

        return str;
    }
}